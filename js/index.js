// Generated by CoffeeScript 1.7.1
(function() {
  var $, bufferSize, context, node, potzy, sampleDuration, sampleRate, t, volume,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  context = null;

  node = null;

  sampleRate = null;

  sampleDuration = null;

  t = 0;

  volume = 0.1;

  bufferSize = 4096;

  $ = function(id) {
    return document.getElementById(id);
  };

  window.potzy = potzy = new ((function() {
    function _Class() {
      this.pause = __bind(this.pause, this);
      this.play = __bind(this.play, this);
      this["import"] = __bind(this["import"], this);
      this.init = __bind(this.init, this);
      this.readyCallbacks = [];
    }

    _Class.prototype.init = function() {
      var cb, e, _i, _len, _ref;
      $("play").addEventListener('click', this.play, false);
      $("pause").addEventListener('click', this.pause, false);
      this.editor = CodeMirror(document.body, {
        mode: "javascript",
        value: "function dsp(t) {\n  return Math.sin(2 * Math.PI * t * 440);\n}"
      });
      this.editor.on("change", this["import"]);
      this["import"]();
      this.editor.focus();
      try {
        if (window.AudioContext == null) {
          window.AudioContext = window.webkitAudioContext;
        }
        context = new AudioContext();
        sampleRate = context.sampleRate;
        sampleDuration = 1 / sampleRate;
        node = context.createScriptProcessor(bufferSize, 1, 1);
        node.loop = false;
        node.onaudioprocess = (function(_this) {
          return function(e) {
            var i, output, _i, _ref, _results;
            output = e.outputBuffer.getChannelData(0);
            _results = [];
            for (i = _i = 0, _ref = output.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
              t += sampleDuration;
              _results.push(output[i] = volume * _this.fn(t));
            }
            return _results;
          };
        })(this);
        this.ready = true;
        _ref = this.readyCallbacks;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          cb = _ref[_i];
          cb();
        }
        return delete this.readyCallbacks;
      } catch (_error) {
        e = _error;
        this.ready = false;
        return alert('Web Audio API is not supported in this browser');
      }
    };

    _Class.prototype["import"] = function() {
      var e, fn, js, str;
      js = this.editor.getValue();
      try {
        str = "(function() {\n  var sampleRate = " + sampleRate + ";\n  " + js + "\n  return dsp;\n})()";
        fn = eval(str);
        fn(0);
        fn(1);
        fn(100.499);
        return this._fn = fn;
      } catch (_error) {
        e = _error;
        return console.error(e);
      }
    };

    _Class.prototype.play = function() {
      return node.connect(context.destination);
    };

    _Class.prototype.pause = function() {
      return node.disconnect();
    };

    _Class.prototype._fn = function() {
      return 0;
    };

    _Class.prototype.fn = function(t) {
      var e;
      try {
        return this._fn(t);
      } catch (_error) {
        e = _error;
        return 0;
      }
    };

    _Class.prototype.onReady = function(fn) {
      if (this.ready) {
        return setTimeout(fn, 0);
      } else {
        return this.readyCallbacks.push(fn);
      }
    };

    return _Class;

  })());

  window.addEventListener('load', window.potzy.init, false);

}).call(this);
